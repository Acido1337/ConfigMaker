<Window x:Class="ConfigMaker.MainWindow"
        xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
        xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
        xmlns:d="http://schemas.microsoft.com/expression/blend/2008"
        xmlns:mc="http://schemas.openxmlformats.org/markup-compatibility/2006"
        xmlns:system="clr-namespace:System;assembly=mscorlib"
        xmlns:converters="clr-namespace:ConfigMaker.Utils.Converters"
        xmlns:utils="clr-namespace:ConfigMaker.Utils"
        xmlns:viewmodels="clr-namespace:ConfigMaker.Mvvm.ViewModels"
        xmlns:materialDesign="http://materialdesigninxaml.net/winfx/xaml/themes"
        xmlns:res="clr-namespace:ConfigMaker.Properties"
        xmlns:local="clr-namespace:ConfigMaker"
        TextElement.Foreground="{DynamicResource MaterialDesignBody}"
        TextElement.FontWeight="Regular"
        TextElement.FontSize="13"
        TextOptions.TextFormattingMode="Ideal"
        TextOptions.TextRenderingMode="Auto"
        Background="{DynamicResource MaterialDesignPaper}"
        FontFamily="{DynamicResource MaterialDesignFont}"
        mc:Ignorable="d"
        Title="" Height="500" Width="1120" MinHeight="500" MinWidth="1120" Name="mainWindow" WindowState="Maximized">
    <Window.Resources>
        <converters:BoolToFontWeightConverter x:Key="boolToFontweightConverter"/>
        <converters:BoolToVisibilityConverter x:Key="boolToVisibilityConverter"/>
        <converters:EquivalenceChecker x:Key="equivalenceChecker"/>
        <Style x:Key="BubbleButton" TargetType="materialDesign:Chip">
            <Setter Property="FontSize" Value="10"/>
            <Setter Property="MinWidth" Value="40"/>
            <Setter Property="Margin" Value="2"/>
            <Setter Property="FontSize" Value="15"/>
        </Style>
        <Style x:Key="CustomBorder" TargetType="Border">
            <!--<Setter Property="Background" Value="{StaticResource MaterialDesignBackground}"/>-->
            <Setter Property="Background" Value="Transparent"/>
            <Setter Property="BorderBrush" Value="{StaticResource PrimaryHueMidBrush}"/>
            <Setter Property="BorderThickness" Value="2"/>
            <Style.Triggers>
                <Trigger Property="IsEnabled" Value="False">
                    <Setter Property="BorderBrush" Value="{StaticResource MaterialDesignCheckBoxDisabled}"/>
                </Trigger>
            </Style.Triggers>
        </Style>
        <Style x:Key="AttachmentBorder" TargetType="Border">
            <Setter Property="BorderBrush" Value="{StaticResource MaterialDesignCheckBoxDisabled}"/>
            <Setter Property="BorderThickness" Value="2"/>
            <Setter Property="Background" Value="Transparent"/>
            <Setter Property="Margin" Value="1"/>
            <Setter Property="utils:SelectionAssistant.IsSelected" Value="False"/>
            <Style.Triggers>
                <Trigger Property="utils:SelectionAssistant.IsSelected" Value="True">
                    <Setter Property="BorderBrush" Value="{StaticResource SecondaryAccentBrush}"/>
                </Trigger>
            </Style.Triggers>
        </Style>
        <Style x:Key="TabItemRadioButton" TargetType="RadioButton">
            <Setter Property="Template">
                <Setter.Value>
                    <ControlTemplate TargetType="RadioButton">
                        <Button x:Name="button" Style="{StaticResource MaterialDesignFlatButton}">
                            <ContentPresenter Content="{TemplateBinding Content}"/>
                        </Button>
                        <ControlTemplate.Triggers>
                            <EventTrigger RoutedEvent="ButtonBase.Click" SourceName="button">
                                <BeginStoryboard>
                                    <Storyboard>
                                        <BooleanAnimationUsingKeyFrames Storyboard.TargetProperty="IsChecked">
                                            <DiscreteBooleanKeyFrame KeyTime="0:0:0" Value="True"/>
                                        </BooleanAnimationUsingKeyFrames>
                                    </Storyboard>
                                </BeginStoryboard>
                            </EventTrigger>
                            <Trigger Property="IsChecked" Value="True">
                                <Trigger.EnterActions>
                                    <BeginStoryboard>
                                        <Storyboard>
                                            <DoubleAnimation To="17" Storyboard.TargetName="button" Storyboard.TargetProperty="FontSize" Duration="0:0:0.100" />
                                        </Storyboard>
                                    </BeginStoryboard>
                                </Trigger.EnterActions>
                                <Trigger.ExitActions>
                                    <BeginStoryboard>
                                        <Storyboard>
                                            <DoubleAnimation Storyboard.TargetName="button" Storyboard.TargetProperty="FontSize" Duration="0:0:0.100"/>
                                        </Storyboard>
                                    </BeginStoryboard>
                                </Trigger.ExitActions>
                            </Trigger>
                        </ControlTemplate.Triggers>
                    </ControlTemplate>
                </Setter.Value>
            </Setter>
        </Style>
        <Style x:Key="MaterialDesignTabItem" TargetType="RadioButton">
            <Setter Property="Template">
                <Setter.Value>
                    <ControlTemplate TargetType="RadioButton">
                        <Grid>
                            <Button x:Name="button" Style="{StaticResource MaterialDesignFlatButton}" Command="{Binding SelectTabCommand}" CommandParameter="{TemplateBinding Tag}">
                                <ContentPresenter Content="{TemplateBinding Content}"/>
                            </Button>
                            <Border VerticalAlignment="Bottom" Visibility="Hidden" x:Name="Underline" BorderBrush="{StaticResource PrimaryHueMidBrush}" BorderThickness="0 3 0 0"/>
                        </Grid>
                        <ControlTemplate.Triggers>
                            <!--<EventTrigger RoutedEvent="ButtonBase.Click" SourceName="button">
                                <BeginStoryboard>
                                    <Storyboard>
                                        <BooleanAnimationUsingKeyFrames Storyboard.TargetProperty="IsChecked">
                                            <DiscreteBooleanKeyFrame KeyTime="0:0:0" Value="True"/>
                                        </BooleanAnimationUsingKeyFrames>
                                    </Storyboard>
                                </BeginStoryboard>
                            </EventTrigger>-->
                            <Trigger Property="IsChecked" Value="True">
                                <Setter TargetName="Underline" Property="Visibility" Value="Visible"/>
                            </Trigger>
                        </ControlTemplate.Triggers>
                    </ControlTemplate>
                </Setter.Value>
            </Setter>
        </Style>
        
        <DataTemplate DataType="{x:Type viewmodels:TextViewModel}">
            <Border Margin="{Binding Margin}">
                <TextBlock 
                    FontWeight="Bold" 
                    Text="{Binding Text}" 
                    HorizontalAlignment="{Binding HorizontalAlignment}"
                    VerticalAlignment="{Binding VerticalAlignment}"/>
            </Border>
        </DataTemplate>
        
        <DataTemplate DataType="{x:Type viewmodels:EntryViewModel}">
            <CheckBox
                Command="{Binding SelectCommand}"
                utils:FocusExtension.IsFocused="{Binding IsFocused}"
                IsEnabled="{Binding IsEnabled}" 
                IsChecked="{Binding IsChecked}" 
                Content="{Binding Content}" />
        </DataTemplate>
        
        <DataTemplate DataType="{x:Type viewmodels:ActionViewModel}">
            <CheckBox 
                Command="{Binding SelectCommand}"
                utils:FocusExtension.IsFocused="{Binding IsFocused}"
                IsEnabled="{Binding IsEnabled}" 
                IsChecked="{Binding IsChecked}" 
                Content="{Binding Content}" 
                ToolTip="{Binding ToolTip}"/>
        </DataTemplate>
        
        <DataTemplate DataType="{x:Type viewmodels:BuyMenuViewModel}">
            <StackPanel Orientation="Vertical">
                <CheckBox
                    Command="{Binding SelectCommand}"
                    utils:FocusExtension.IsFocused="{Binding IsFocused}"
                    IsEnabled="{Binding IsEnabled}" 
                    IsChecked="{Binding IsChecked}" 
                    Content="{Binding Content}"/>
                <ItemsControl IsEnabled="{Binding IsChecked}" ItemsSource="{Binding Path=Categories}">
                    <ItemsControl.ItemsPanel>
                        <ItemsPanelTemplate>
                            <WrapPanel/>
                        </ItemsPanelTemplate>
                    </ItemsControl.ItemsPanel>
                </ItemsControl>
            </StackPanel>
        </DataTemplate>
        <DataTemplate DataType="{x:Type viewmodels:WeaponCategoryViewModel}">
            <StackPanel>
                <Border>
                    <TextBlock Text="{Binding Name}" HorizontalAlignment="Center" FontWeight="Bold"/>
                </Border>
                <ItemsControl ItemsSource="{Binding Path=Weapons}">
                    <ItemsControl.ItemsPanel>
                        <ItemsPanelTemplate>
                            <StackPanel/>
                        </ItemsPanelTemplate>
                    </ItemsControl.ItemsPanel>
                </ItemsControl>
            </StackPanel>
        </DataTemplate>

        <DataTemplate DataType="{x:Type viewmodels:DynamicEntryViewModel}">
            <Grid Height="30" Visibility="{Binding IsVisible, Converter={StaticResource boolToVisibilityConverter}}">
                <Grid.ColumnDefinitions>
                    <ColumnDefinition Width="3*"/>
                    <ColumnDefinition Width="6*"/>
                    <ColumnDefinition Width="1*"/>
                </Grid.ColumnDefinitions>
                <TextBlock Text="{Binding Content}" HorizontalAlignment="Center" VerticalAlignment="Center"/>
                <Grid Grid.Column="1" IsEnabled="{Binding IsChecked}">
                    <Grid.ColumnDefinitions>
                        <ColumnDefinition Width="1*"/>
                        <ColumnDefinition Width="Auto"/>
                    </Grid.ColumnDefinitions>
                    <ContentControl Content="{Binding ControllerViewModel}"/>
                    <Button 
                        Visibility="{Binding NeedToggle, Converter={StaticResource boolToVisibilityConverter}}" 
                        Grid.Column="1" 
                        Style="{StaticResource MaterialDesignFlatButton}" 
                        Content="⇄"
                        Command="{Binding Path=DataContext.ToggleCommand, RelativeSource={RelativeSource FindAncestor, AncestorType={x:Type Window}}}"
                        CommandParameter="{Binding Key}"/>
                </Grid>
                <CheckBox 
                    Command="{Binding SelectCommand}"
                    Grid.Column="2"
                    utils:FocusExtension.IsFocused="{Binding IsFocused}"
                    IsEnabled="{Binding IsEnabled}" 
                    IsChecked="{Binding IsChecked}"
                    HorizontalAlignment="Center"
                    VerticalAlignment="Center"/>
            </Grid>
        </DataTemplate>

        <DataTemplate DataType="{x:Type viewmodels:SettingsCategoryViewModel}">
            <StackPanel Visibility="{Binding IsVisible, Converter={StaticResource boolToVisibilityConverter}}">
                <Border>
                    <TextBlock Text="{Binding Name}" HorizontalAlignment="Center" FontWeight="Bold"/>
                </Border>
                <ItemsControl ItemsSource="{Binding Path=Items}">
                    <ItemsControl.ItemsPanel>
                        <ItemsPanelTemplate>
                            <StackPanel/>
                        </ItemsPanelTemplate>
                    </ItemsControl.ItemsPanel>
                </ItemsControl>
            </StackPanel>
        </DataTemplate>

        <DataTemplate DataType="{x:Type viewmodels:IntervalControllerViewModel}">
            <Grid>
                <Grid.ColumnDefinitions>
                    <ColumnDefinition Width="Auto"/>
                    <ColumnDefinition Width="1*"/>
                    <ColumnDefinition Width="Auto"/>
                </Grid.ColumnDefinitions>
                <Border Grid.Column="0" Width="25">
                    <TextBlock Text="{Binding From}" FontSize="12" HorizontalAlignment="Center" VerticalAlignment="Center"/>
                </Border>
                <Slider
                    Grid.Column="1" Width="Auto"
                    Minimum="{Binding From}"
                    Maximum="{Binding To}"
                    Value="{Binding Value, Mode=TwoWay}"
                    TickFrequency="{Binding Step}"
                    IsSnapToTickEnabled="True"
                    VerticalAlignment="Center"/>
                <Border Grid.Column="2" Width="25">
                    <TextBlock Text="{Binding To}" FontSize="12" HorizontalAlignment="Center" VerticalAlignment="Center"/>
                </Border>
            </Grid>
        </DataTemplate>

        <DataTemplate DataType="{x:Type viewmodels:ComboBoxControllerViewModel}">
            <ComboBox 
                ItemsSource="{Binding Items}" 
                SelectedIndex="{Binding SelectedIndex, Mode=TwoWay}"
                SelectedItem="{Binding SelectedItem, Mode=OneWayToSource}"
                materialDesign:ComboBoxAssist.ClassicMode="True"/>
        </DataTemplate>

        <DataTemplate DataType="{x:Type viewmodels:TextboxControllerViewModel}">
            <TextBox Text="{Binding Text, Mode=TwoWay, UpdateSourceTrigger=PropertyChanged}" VerticalAlignment="Center"/>
        </DataTemplate>

        <DataTemplate DataType="{x:Type viewmodels:ItemViewModel}">
            <materialDesign:Chip 
                Style="{StaticResource BubbleButton}"
                Content="{Binding Text}"
                Height="{Binding Height}"
                Foreground="{StaticResource MaterialDesignBody}"
                FontSize="{Binding FontSize}" 
                FontWeight="{Binding IsSelected, Converter={StaticResource boolToFontweightConverter}}"
                Command="{Binding SelectCommand}">
            </materialDesign:Chip>
        </DataTemplate>

        <DataTemplate DataType="{x:Type viewmodels:CustomCmdViewModel}">
            <GroupBox>
                <GroupBox.Header>
                    <CheckBox
                        Command="{Binding SelectCommand}"
                        Content="{Binding Content}"
                        utils:FocusExtension.IsFocused="{Binding IsFocused}"
                        IsEnabled="{Binding IsEnabled}" 
                        IsChecked="{Binding IsChecked}"/>
                </GroupBox.Header>
                <StackPanel Orientation="Vertical" IsEnabled="{Binding IsChecked}">
                    <StackPanel Orientation="Horizontal">
                        <TextBox 
                            Text="{Binding Input, Mode=TwoWay, UpdateSourceTrigger=PropertyChanged}" 
                            Width="250"/>
                        <Button 
                            IsEnabled="{Binding AdditionEnabled}" 
                            Content="{x:Static res:Resources.Add_Button}"
                            Command="{Binding AddCommand}"/>
                        <Button 
                            IsEnabled="{Binding DeletingEnabled}" 
                            Content="{x:Static res:Resources.Remove_Button}"
                            Command="{Binding DeleteCommand}"/>
                    </StackPanel>
                    <Border Style="{StaticResource CustomBorder}" Margin="0,2,0,0">
                        <ItemsControl ItemsSource="{Binding Items}">
                            <ItemsControl.ItemsPanel>
                                <ItemsPanelTemplate>
                                    <WrapPanel Orientation="Horizontal" Height="70"/>
                                </ItemsPanelTemplate>
                            </ItemsControl.ItemsPanel>
                        </ItemsControl>
                    </Border>
                </StackPanel>
            </GroupBox>
        </DataTemplate>

        <DataTemplate DataType="{x:Type viewmodels:CycleCrosshairViewModel}">
            <GroupBox>
                <GroupBox.Header>
                    <CheckBox
                        Command="{Binding SelectCommand}"
                        Content="{Binding Content}"
                        utils:FocusExtension.IsFocused="{Binding IsFocused}"
                        IsEnabled="{Binding IsEnabled}" 
                        IsChecked="{Binding IsChecked}"/>
                </GroupBox.Header>
                <StackPanel Margin="0,3,0,3" Orientation="Horizontal" IsEnabled="{Binding IsChecked}">
                    <Slider 
                        VerticalAlignment="Center" 
                        x:Name="cycleChSlider" 
                        Minimum="{Binding MinimumCount}" 
                        Maximum="{Binding MaximumCount}" 
                        TickFrequency="1" 
                        Value="{Binding CrosshairCount, Mode=TwoWay}" 
                        Width="100" 
                        IsSnapToTickEnabled="True" />
                    <TextBlock 
                        VerticalAlignment="Center" 
                        Margin="5,0,5,0" 
                        Text="{Binding ElementName=cycleChSlider, Path=Value}"/>
                    <Button 
                        Content="{x:Static res:Resources.GenerateCrosshairs_Button}"
                        Command="{Binding RelativeSource={RelativeSource Mode=FindAncestor, AncestorType=Window}, Path=DataContext.GenerateCrosshairsCommand}" />
                </StackPanel>
            </GroupBox>
        </DataTemplate>

        <DataTemplate DataType="{x:Type viewmodels:VolumeRegulatorViewModel}">
            <GroupBox>
                <GroupBox.Header>
                    <CheckBox
                        Command="{Binding SelectCommand}"
                        Content="{Binding Content}"
                        utils:FocusExtension.IsFocused="{Binding IsFocused}"
                        IsEnabled="{Binding IsEnabled}" 
                        IsChecked="{Binding IsChecked}"/>
                </GroupBox.Header>
                <StackPanel IsEnabled="{Binding IsChecked}">
                    <StackPanel Orientation="Horizontal" Height="28">
                        <TextBlock Width="30" Text="{x:Static res:Resources.From_Label}" />
                        <Slider x:Name="minVolumeSlider" Value="{Binding From}" Width="150" Minimum="{Binding FromMinimum}" 
                            Maximum="{Binding FromMaximum}" IsSnapToTickEnabled="True" TickFrequency="0.01"/>
                        <Border Width="30">
                            <TextBlock HorizontalAlignment="Center" Text="{Binding Path=Value, ElementName=minVolumeSlider}"/>
                        </Border>
                        <ComboBox Margin="25,0,0,0" Width="170" Name="volumeDirectionCombobox" SelectedIndex="{Binding Path=Mode}">
                            <ComboBoxItem Content="{x:Static res:Resources.VolumeReduce_ComboboxItem}"/>
                            <ComboBoxItem Content="{x:Static res:Resources.VolumeIncrease_ComboboxItem}"/>
                        </ComboBox>
                    </StackPanel>
                    <StackPanel Orientation="Horizontal" Height="28">
                        <TextBlock Width="30" Text="{x:Static res:Resources.To_Label}"/>
                        <Slider x:Name="maxVolumeSlider" Value="{Binding To}" Width="150" Minimum="{Binding ToMinimum}" 
                                Maximum="{Binding ToMaximum}" IsSnapToTickEnabled="True" TickFrequency="0.01"/>
                        <Border Width="30">
                            <TextBlock HorizontalAlignment="Center" Text="{Binding Path=Value, ElementName=maxVolumeSlider}"/>
                        </Border>
                    </StackPanel>
                    <StackPanel Orientation="Horizontal" Height="28">
                        <TextBlock Width="30" Text="{x:Static res:Resources.Step_Label}"/>
                        <Slider x:Name="volumeStepSlider" Value="{Binding Step}" Width="150" Minimum="{Binding StepMinimum}"
                                Maximum="{Binding StepMaximum}" IsSnapToTickEnabled="True" TickFrequency="0.01"/>
                        <Border Width="30">
                            <TextBlock HorizontalAlignment="Center" Text="{Binding Path=Value, ElementName=volumeStepSlider}"/>
                        </Border>
                    </StackPanel>
                </StackPanel>
            </GroupBox>
        </DataTemplate>

        <DataTemplate DataType="{x:Type viewmodels:AliasSetViewModel}">
            <Grid IsEnabled="{Binding IsEnabled}">
                <Grid.RowDefinitions>
                    <RowDefinition Height="30"/>
                    <RowDefinition Height="1*"/>
                </Grid.RowDefinitions>
                <StackPanel Orientation="Horizontal">
                    <TextBox 
                            Text="{Binding Input, Mode=TwoWay, UpdateSourceTrigger=PropertyChanged}" 
                            Width="250"/>
                    <Button 
                            IsEnabled="{Binding AdditionEnabled}" 
                            Content="{x:Static res:Resources.Add_Button}"
                            Command="{Binding AddCommand}"/>
                    <Button 
                            IsEnabled="{Binding DeletingEnabled}" 
                            Content="{x:Static res:Resources.Remove_Button}"
                            Command="{Binding DeleteCommand}"/>
                </StackPanel>
                <Border Grid.Row="1" Style="{StaticResource CustomBorder}" Margin="0,2,0,0">
                    <ItemsControl ItemsSource="{Binding Items}">
                        <ItemsControl.ItemsPanel>
                            <ItemsPanelTemplate>
                                <WrapPanel Orientation="Horizontal"/>
                            </ItemsPanelTemplate>
                        </ItemsControl.ItemsPanel>
                    </ItemsControl>
                </Border>
            </Grid>
        </DataTemplate>

        <DataTemplate DataType="{x:Type viewmodels:AttachmentsViewModel}">
            <Button Height="Auto" Width="Auto" 
                    Command="{Binding Path=DataContext.SelectAttachmentsCommand, RelativeSource={RelativeSource FindAncestor, AncestorType={x:Type Window}}}"
                    CommandParameter="{Binding Tag}">
                <Button.Template>
                    <ControlTemplate TargetType="Button">
                        <Border Height="Auto">
                            <Border.Style>
                                <Style TargetType="Border" BasedOn="{StaticResource AttachmentBorder}">
                                    <Setter Property="BorderBrush" Value="{StaticResource MaterialDesignCheckBoxDisabled}"/>
                                    <Setter Property="BorderThickness" Value="2"/>
                                    <Setter Property="Background" Value="Transparent"/>
                                    <Setter Property="Margin" Value="1"/>
                                    <Style.Triggers>
                                        <DataTrigger Binding="{Binding Path=IsSelected}" Value="True">
                                            <Setter Property="BorderBrush" Value="{StaticResource SecondaryAccentBrush}"/>
                                        </DataTrigger>
                                    </Style.Triggers>
                                </Style>
                            </Border.Style>
                            <ItemsControl ItemsSource="{Binding Items}">
                                <ItemsControl.ItemsPanel>
                                    <ItemsPanelTemplate>
                                        <WrapPanel Orientation="Horizontal"/>
                                    </ItemsPanelTemplate>
                                </ItemsControl.ItemsPanel>
                            </ItemsControl>
                        </Border>
                    </ControlTemplate>
                </Button.Template>
            </Button>
            <!--<Border MouseLeftButtonUp="AttachmentsBorder_Click">
                <Border.Style>
                    <Style TargetType="Border" BasedOn="{StaticResource AttachmentBorder}">
                        <Setter Property="BorderBrush" Value="{StaticResource MaterialDesignCheckBoxDisabled}"/>
                        <Setter Property="BorderThickness" Value="2"/>
                        <Setter Property="Background" Value="Transparent"/>
                        <Setter Property="Margin" Value="1"/>
                        <Style.Triggers>
                            <DataTrigger Binding="{Binding Path=IsSelected}" Value="True">
                                <Setter Property="BorderBrush" Value="{StaticResource SecondaryAccentBrush}"/>
                            </DataTrigger>
                        </Style.Triggers>
                    </Style>
                </Border.Style>
                <Grid>
                    <ScrollViewer>
                        <ItemsControl ItemsSource="{Binding Items}">
                            <ItemsControl.ItemsPanel>
                                <ItemsPanelTemplate>
                                    <WrapPanel Orientation="Horizontal"/>
                                </ItemsPanelTemplate>
                            </ItemsControl.ItemsPanel>
                        </ItemsControl>
                    </ScrollViewer>
                    <TextBlock VerticalAlignment="Bottom" HorizontalAlignment="Right" Margin="0,0,18,0" Text="{Binding Hint}" FontStyle="Italic" FontSize="10"/>
                </Grid>
            </Border>-->
        </DataTemplate>

        <DataTemplate DataType="{x:Type viewmodels:SearchViewModel}">
            <materialDesign:ColorZone HorizontalAlignment="Left" Mode="Standard" >
                <StackPanel Orientation="Horizontal">
                    <TextBox Text="{Binding SearchInput, Mode=TwoWay, UpdateSourceTrigger=PropertyChanged}" Width="180" Height="32" materialDesign:HintAssist.Hint="{x:Static res:Resources.Search_Hint}"/>
                    <materialDesign:PackIcon VerticalAlignment="Center" Opacity="0.70" Kind="Magnify"/>
                    <Button Style="{StaticResource MaterialDesignFlatButton}" 
                            Margin="15 0 0 0" 
                            Visibility="{Binding IsAddButtonVisible, Converter={StaticResource boolToVisibilityConverter}}" 
                            Content="{Binding Hint}"
                            Command="{Binding Path=DataContext.AddUnknownCommand, RelativeSource={RelativeSource Mode=FindAncestor, AncestorType=Window}}"/>
                </StackPanel>
            </materialDesign:ColorZone>
        </DataTemplate>
    </Window.Resources>
    <Window.DataContext>
        <viewmodels:MainViewModel/>
    </Window.DataContext>
    <Grid>
        <DockPanel LastChildFill="True">
            <!--upper panel-->
            <materialDesign:ColorZone DockPanel.Dock="Top" Mode="PrimaryMid" Padding="16 8 16 8">
                <DockPanel LastChildFill="True">
                    <materialDesign:PopupBox DockPanel.Dock="Right" PlacementMode="BottomAndAlignRightEdges">
                        <StackPanel>
                            <Button Content="{x:Static res:Resources.SelectConfig_Button}" Command="{Binding OpenCfgCommand}"/>
                            <Button Content="{x:Static res:Resources.SaveConfig_Button}" Command="{Binding SaveCfgCommand}"/>
                            <Button Content="{x:Static res:Resources.GenerateConfig_Button}" Command="{Binding GenerateCommand}"/>
                            <Border BorderBrush="{StaticResource MaterialDesignDivider}" BorderThickness="0,1,0,0"/>
                            <Button Content="{x:Static res:Resources.About_Button}" Command="{Binding AboutCommand}"/>
                        </StackPanel>
                    </materialDesign:PopupBox>
                    <TextBlock Text="ConfigMaker by Exide"  Style="{StaticResource MaterialDesignHeadlineTextBlock}"/>
                </DockPanel>
            </materialDesign:ColorZone>
            <Grid Margin="5 0 5 3">
                <Grid.RowDefinitions>
                    <RowDefinition Height="58*"/>
                    <RowDefinition Height="12*"/>
                    <RowDefinition Height="28"/>
                    <RowDefinition Height="30*"/>
                </Grid.RowDefinitions>
                <Grid.ColumnDefinitions>
                    <ColumnDefinition/>
                    <ColumnDefinition/>
                    <ColumnDefinition/>
                    <ColumnDefinition/>
                </Grid.ColumnDefinitions>
                <DockPanel LastChildFill="True" Grid.ColumnSpan="4">
                    <StackPanel DockPanel.Dock="Top" Orientation="Vertical">
                        <DockPanel LastChildFill="True">
                            <StackPanel Orientation="Horizontal" DockPanel.Dock="Right">
                                <TextBox Width="115" Style="{StaticResource MaterialDesignFloatingHintTextBox}" materialDesign:HintAssist.Hint="{x:Static res:Resources.ConfigName_Hint}">
                                    <TextBox.Text>
                                        <Binding Path="CustomCfgName">
                                            <Binding.ValidationRules>
                                                <converters:NameValidationRule ValidatesOnTargetUpdated="True"/>
                                            </Binding.ValidationRules>
                                        </Binding>
                                    </TextBox.Text>
                                </TextBox>
                                <TextBox Width="465" Margin="10 0 0 0" Style="{StaticResource MaterialDesignFloatingHintTextBox}" materialDesign:HintAssist.Hint="{x:Static res:Resources.CsgoCfgPath_Hint}">
                                    <TextBox.Text>
                                        <Binding Path="CustomCfgPath">
                                            <Binding.ValidationRules>
                                                <converters:CfgDirValidationRule ValidatesOnTargetUpdated="True"/>
                                            </Binding.ValidationRules>
                                        </Binding>
                                    </TextBox.Text>
                                </TextBox>
                            </StackPanel>
                            <StackPanel Orientation="Horizontal">
                                <RadioButton Tag="0" IsChecked="{Binding SelectedTab, Converter={StaticResource equivalenceChecker}, ConverterParameter=0}" GroupName="TabGroup" Content="{x:Static res:Resources.ActionCategory_Button}" Style="{StaticResource MaterialDesignTabItem}"/>
                                <RadioButton Tag="1" IsChecked="{Binding SelectedTab, Converter={StaticResource equivalenceChecker}, ConverterParameter=1}" GroupName="TabGroup" Content="{x:Static res:Resources.BuyScenarioCategory_Button}" Style="{StaticResource MaterialDesignTabItem}"/>
                                <RadioButton Tag="2" IsChecked="{Binding SelectedTab, Converter={StaticResource equivalenceChecker}, ConverterParameter=2}" GroupName="TabGroup" Content="{x:Static res:Resources.GameSettingsCategory_Button}" Style="{StaticResource MaterialDesignTabItem}"/>
                                <RadioButton Tag="3" IsChecked="{Binding SelectedTab, Converter={StaticResource equivalenceChecker}, ConverterParameter=3}" GroupName="TabGroup" Content="{x:Static res:Resources.ExtraCategory_Button}" Style="{StaticResource MaterialDesignTabItem}"/>
                            </StackPanel>
                        </DockPanel>
                        <Border BorderBrush="{StaticResource MaterialDesignDivider}" BorderThickness="0,1,0,0"/>
                    </StackPanel>
                    <Grid Margin="5">
                        <!--action tab grid-->
                        <Grid>
                            <Grid.Style>
                                <Style TargetType="Grid">
                                    <Setter Property="Visibility" Value="Collapsed"/>
                                    <Style.Triggers>
                                        <DataTrigger Binding="{Binding SelectedTab}" Value="0">
                                            <Setter Property="Visibility" Value="Visible"/>
                                        </DataTrigger>
                                    </Style.Triggers>
                                </Style>
                            </Grid.Style>
                            <ScrollViewer VerticalScrollBarVisibility="Disabled" HorizontalScrollBarVisibility="Auto">
                                <ItemsControl ItemsSource="{Binding ActionTabItemViewModels}">
                                    <ItemsControl.ItemsPanel>
                                        <ItemsPanelTemplate>
                                            <WrapPanel Orientation="Vertical"/>
                                        </ItemsPanelTemplate>
                                    </ItemsControl.ItemsPanel>
                                </ItemsControl>
                            </ScrollViewer>
                        </Grid>
                        <!--buy tab grid-->
                        <Grid>
                            <Grid.Style>
                                <Style TargetType="Grid">
                                    <Setter Property="Visibility" Value="Collapsed"/>
                                    <Style.Triggers>
                                        <DataTrigger Binding="{Binding SelectedTab}" Value="1">
                                            <Setter Property="Visibility" Value="Visible"/>
                                        </DataTrigger>
                                    </Style.Triggers>
                                </Style>
                            </Grid.Style>
                            <Grid>
                                <ContentControl Content="{Binding BuyMenuViewModel}"/>
                            </Grid>
                        </Grid>
                        <!--game settings tab grid-->
                        <Grid>
                            <Grid.Style>
                                <Style TargetType="Grid">
                                    <Setter Property="Visibility" Value="Collapsed"/>
                                    <Style.Triggers>
                                        <DataTrigger Binding="{Binding SelectedTab}" Value="2">
                                            <Setter Property="Visibility" Value="Visible"/>
                                        </DataTrigger>
                                    </Style.Triggers>
                                </Style>
                            </Grid.Style>
                            <Grid>
                                <DockPanel>
                                    <ContentControl Content="{Binding SearchViewModel}" DockPanel.Dock="Top"/>
                                    <!--<materialDesign:ColorZone HorizontalAlignment="Left" Mode="Standard" DockPanel.Dock="Top">
                                        <StackPanel Orientation="Horizontal">
                                            <TextBox Text="{Binding SearchInput, Mode=TwoWay, UpdateSourceTrigger=PropertyChanged}" Width="180" materialDesign:HintAssist.Hint="{x:Static res:Resources.Search_Hint}"/>
                                            <materialDesign:PackIcon VerticalAlignment="Center" Opacity="0.70" Kind="Magnify"/>
                                            <Button Style="{StaticResource MaterialDesignFlatButton}" Margin="15 0 0 0" Name="addUnknownCmdButton" Visibility="Hidden" Content="{x:Static res:Resources.UnknownCommandExecution_Format}"/>
                                        </StackPanel>
                                    </materialDesign:ColorZone>-->
                                    <ScrollViewer Margin="0,2,0,0">
                                        <ItemsControl ItemsSource="{Binding GameSettingsCategoryViewModels}">
                                            <ItemsControl.ItemsPanel>
                                                <ItemsPanelTemplate>
                                                    <StackPanel Orientation="Vertical"/>
                                                </ItemsPanelTemplate>
                                            </ItemsControl.ItemsPanel>
                                        </ItemsControl>
                                    </ScrollViewer>
                                </DockPanel>
                            </Grid>
                        </Grid>
                        <!--extra tab grid-->
                        <Grid>
                            <Grid.Style>
                                <Style TargetType="Grid">
                                    <Setter Property="Visibility" Value="Collapsed"/>
                                    <Style.Triggers>
                                        <DataTrigger Binding="{Binding SelectedTab}" Value="3">
                                            <Setter Property="Visibility" Value="Visible"/>
                                        </DataTrigger>
                                    </Style.Triggers>
                                </Style>
                            </Grid.Style>
                            <Grid>
                                <ScrollViewer>
                                    <Grid>
                                        <Grid.Resources>
                                            <Style TargetType="CheckBox" BasedOn="{StaticResource {x:Type CheckBox}}">
                                                <Setter Property="Foreground" Value="{StaticResource PrimaryHueMidForegroundBrush}"/>
                                                <Setter Property="Background" Value="{StaticResource MaterialDesignPaper}"/>
                                            </Style>
                                        </Grid.Resources>
                                        <ItemsControl ItemsSource="{Binding ExtraControllerViewModels}">
                                            <ItemsControl.ItemsPanel>
                                                <ItemsPanelTemplate>
                                                    <StackPanel Orientation="Vertical"/>
                                                </ItemsPanelTemplate>
                                            </ItemsControl.ItemsPanel>
                                        </ItemsControl>
                                    </Grid>
                                </ScrollViewer>
                            </Grid>
                        </Grid>
                    </Grid>
                </DockPanel>
                <Grid Grid.Row="1" Grid.ColumnSpan="4">
                    <Grid.Style>
                        <Style TargetType="Grid">
                            <Setter Property="Visibility" Value="Collapsed"/>
                            <Style.Triggers>
                                <MultiDataTrigger>
                                    <MultiDataTrigger.Conditions>
                                        <Condition Binding="{Binding Path=StateBinding}" Value="InvalidState"/>
                                        <Condition Binding="{Binding ElementName=stateCombobox, Path=SelectedIndex}" Value="1"/>
                                    </MultiDataTrigger.Conditions>
                                    <MultiDataTrigger.Setters>
                                        <Setter Property="Visibility" Value="Visible"/>
                                    </MultiDataTrigger.Setters>
                                </MultiDataTrigger>
                                <DataTrigger Binding="{Binding Path=StateBinding}" Value="KeyDown">
                                    <Setter Property="Visibility" Value="Visible"/>
                                </DataTrigger>
                                <DataTrigger Binding="{Binding Path=StateBinding}" Value="KeyUp">
                                    <Setter Property="Visibility" Value="Visible"/>
                                </DataTrigger>
                            </Style.Triggers>
                        </Style>
                    </Grid.Style>
                    <Grid.ColumnDefinitions>
                        <ColumnDefinition/>
                        <ColumnDefinition/>
                    </Grid.ColumnDefinitions>
                    <ContentControl Content="{Binding KeyDownAttachmentsVM}"/>
                    <ContentControl Content="{Binding KeyUpAttachmentsVM}" Grid.Column="1"/>
                </Grid>
                <Grid Grid.Row="1" Grid.ColumnSpan="4">
                    <Grid.Style>
                        <Style TargetType="Grid">
                            <Setter Property="Visibility" Value="Visible"/>
                            <Style.Triggers>
                                <MultiDataTrigger>
                                    <MultiDataTrigger.Conditions>
                                        <Condition Binding="{Binding Path=StateBinding}" Value="InvalidState"/>
                                        <Condition Binding="{Binding ElementName=stateCombobox, Path=SelectedIndex}" Value="1"/>
                                    </MultiDataTrigger.Conditions>
                                    <MultiDataTrigger.Setters>
                                        <Setter Property="Visibility" Value="Collapsed"/>
                                    </MultiDataTrigger.Setters>
                                </MultiDataTrigger>
                                <DataTrigger Binding="{Binding Path=StateBinding}" Value="KeyDown">
                                    <Setter Property="Visibility" Value="Collapsed"/>
                                </DataTrigger>
                                <DataTrigger Binding="{Binding Path=StateBinding}" Value="KeyUp">
                                    <Setter Property="Visibility" Value="Collapsed"/>
                                </DataTrigger>
                            </Style.Triggers>
                        </Style>
                    </Grid.Style>
                    <ContentControl Content="{Binding SolidAttachmentsVM}"/>
                </Grid>
                <!--keyboard grid-->
                <Grid x:Name="keyboardGrid" Grid.Row="3" Grid.ColumnSpan="4" Margin="1">
                    <Grid.ColumnDefinitions>
                        <ColumnDefinition Width="4*"/>
                        <ColumnDefinition Width="25*"/>
                    </Grid.ColumnDefinitions>
                    <Grid.Style>
                        <Style TargetType="Grid">
                            <Setter Property="Visibility" Value="Visible" />
                            <Style.Triggers>
                                <!--Удобнее привязаться к элементу, не спрашивай почему-->
                                <DataTrigger Binding="{Binding ElementName=stateCombobox, Path=SelectedIndex}" Value="2">
                                    <Setter Property="Visibility" Value="Collapsed"/>
                                </DataTrigger>
                            </Style.Triggers>
                        </Style>
                    </Grid.Style>
                    <local:VirtualKeyboard DataContext="{Binding KeyboardViewModel}" Grid.ColumnSpan="2" Margin="0,0,-0.4,0.8"/>
                </Grid>
                <!--alias grid-->
                <Grid x:Name="aliasGrid" Grid.Row="3" Grid.ColumnSpan="4" Margin="1">
                    <Grid.Style>
                        <Style TargetType="Grid">
                            <Setter Property="Visibility" Value="Collapsed" />
                            <Style.Triggers>
                                <DataTrigger Binding="{Binding ElementName=stateCombobox, Path=SelectedIndex}" Value="2">
                                    <Setter Property="Visibility" Value="Visible"/>
                                </DataTrigger>
                            </Style.Triggers>
                        </Style>
                    </Grid.Style>
                    <Grid>
                        <ContentControl Name="aliasContentControl" Content="{Binding AliasSetViewModel}"/>
                    </Grid>
                </Grid>
                <StackPanel Orientation="Horizontal" Grid.Row="2" Grid.ColumnSpan="4">
                    <ComboBox 
                        x:Name="stateCombobox"
                        ItemsSource="{Binding StateBindingItemsVM.Items}" 
                        Width="190" 
                        SelectedIndex="{Binding StateBindingItemsVM.SelectedIndex, Mode=TwoWay}"/>
                    <TextBlock VerticalAlignment="Center" Margin="5,3,0,0" TextWrapping="Wrap" Text="{x:Static res:Resources.PressShift_Hint}">
                        <TextBlock.Style>
                            <Style TargetType="TextBlock">
                                <Setter Property="Visibility" Value="Collapsed"/>
                                <Style.Triggers>
                                    <DataTrigger Binding="{Binding ElementName=stateCombobox, Path=SelectedIndex}" Value="1">
                                        <Setter Property="Visibility" Value="Visible"/>
                                    </DataTrigger>
                                </Style.Triggers>
                            </Style>
                        </TextBlock.Style>
                    </TextBlock>
                </StackPanel>
            </Grid>
        </DockPanel>
    </Grid>
</Window>